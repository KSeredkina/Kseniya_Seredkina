"""
Осуществить программу работы с органическими клетками, состоящими из ячеек.
Необходимо создать класс «Клетка». В его конструкторе инициализировать параметр,
соответствующий количеству ячеек клетки (целое число). +
В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()),
вычитание (__sub__()), умножение (__mul__()), деление (__floordiv____truediv__()).
Эти методы должны применяться только к клеткам и выполнять увеличение, уменьшение,
умножение и округление до целого числа деления клеток соответственно.
Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных
двух клеток. +
Вычитание. Участвуют две клетки. Операцию необходимо выполнять, только если разность количества ячеек
двух клеток больше нуля, иначе выводить соответствующее сообщение. +
Умножение. Создаётся общая клетка из двух. Число ячеек общей клетки — произведение количества ячеек
этих двух клеток. +
Деление. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление
количества ячеек этих двух клеток.+
В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
Этот метод позволяет организовать ячейки по рядам.
Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
"""

class Cell:
    def __init__(self, cell_count):
        self.cell_count = int(cell_count)

    def __add__(self, other):
        return Cell(self.cell_count + other.cell_count)

    def __sub__(self, other):
        sub_result = self.cell_count - other.cell_count
        return f'Результат операции: {sub_result}' if sub_result > 0 else 'Результат отрицательный'

    def __mul__(self, other):
        return Cell(int(self.cell_count * other.cell_count))

    def __truediv__(self, other):
        return Cell(round(self.cell_count // other.cell_count))

    def make_order(self, cells_in_row):
        row = ''
        for i in range(int(self.cell_count / cells_in_row)):
            row += f'{"*" * cells_in_row}\\n'
        row += f'{"*" * (self.cell_count % cells_in_row)}'
        return row

    def __str__(self):
        return f'Результат операции: {self.cell_count} клеток'

cell_1 = Cell(24)
cell_2 = Cell(15)
print(cell_1 + cell_2)
print(cell_1 - cell_2)
print(cell_1 / cell_2)
print(cell_1 * cell_2)
print(cell_1.make_order(7))
print(cell_2.make_order(5))
